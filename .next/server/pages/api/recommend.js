"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/api/recommend";
exports.ids = ["pages/api/recommend"];
exports.modules = {

/***/ "(api)/./pages/api/recommend.js":
/*!********************************!*\
  !*** ./pages/api/recommend.js ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ handler)\n/* harmony export */ });\n// Server-side API route to call an LLM and return structured learning paths.\n// This example uses OpenAI's API via fetch. Set process.env.OPENAI_API_KEY.\nasync function handler(req, res) {\n    if (req.method !== \"POST\") {\n        return res.status(405).json({\n            error: \"Only POST\"\n        });\n    }\n    const { skills, goal, experience_level } = req.body || {};\n    if (!skills || !goal) {\n        return res.status(400).json({\n            error: \"Missing skills or goal\"\n        });\n    }\n    // Build a prompt for the LLM to return JSON containing \"paths\": [{title, duration_weeks, steps: [{title, description, resources: []}], level}]\n    const prompt = `\nYou are an expert career coach and must respond ONLY with valid JSON.\nDo not include explanations, introductions, or markdown formatting.\n\nInput:\nSKILLS: ${Array.isArray(skills) ? skills.join(\", \") : skills}\nGOAL: ${goal}\nEXPERIENCE_LEVEL: ${experience_level || \"intermediate\"}\n\nOutput JSON structure:\n{\n  \"paths\": [\n    {\n      \"title\": \"string\",\n      \"level\": \"string\",\n      \"duration_weeks\": number,\n      \"steps\": [\n        {\n          \"title\": \"string\",\n          \"description\": \"string\",\n          \"estimated_time_hours\": number,\n          \"resources\": [{\"name\": \"string\", \"url\": \"string\"}],\n          \"why\": \"string\"\n        }\n      ]\n    }\n  ]\n}\nReturn only valid JSON.\n`;\n    try {\n        const openaiKey = process.env.OPENAI_API_KEY;\n        if (!openaiKey) {\n            // Return a mocked response for local testing without a key\n            const mock = {\n                paths: [\n                    {\n                        title: \"Frontend React + Next.js Path\",\n                        level: \"intermediate\",\n                        duration_weeks: 8,\n                        steps: [\n                            {\n                                title: \"Core React Patterns\",\n                                description: \"Hooks, component design\",\n                                estimated_time_hours: 10,\n                                resources: [\n                                    {\n                                        name: \"React Docs\",\n                                        url: \"https://react.dev\"\n                                    }\n                                ],\n                                why: \"Foundation for modern frontend\"\n                            },\n                            {\n                                title: \"Next.js 13+ App Router\",\n                                description: \"Routing, server components\",\n                                estimated_time_hours: 12,\n                                resources: [\n                                    {\n                                        name: \"Next.js Docs\",\n                                        url: \"https://nextjs.org\"\n                                    }\n                                ],\n                                why: \"Build fullstack with SSR/ISR\"\n                            }\n                        ]\n                    }\n                ]\n            };\n            return res.status(200).json(mock);\n        }\n        const apiRes = await fetch(\"https://api.openai.com/v1/chat/completions\", {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                Authorization: `Bearer ${openaiKey}`\n            },\n            body: JSON.stringify({\n                model: \"gpt-4o-mini\",\n                messages: [\n                    {\n                        role: \"system\",\n                        content: \"You are a helpful career coach that outputs strict JSON.\"\n                    },\n                    {\n                        role: \"user\",\n                        content: prompt\n                    }\n                ],\n                temperature: 0.2,\n                max_tokens: 800\n            })\n        });\n        const json = await apiRes.json();\n        const txt = json.choices?.[0]?.message?.content || \"\";\n        // Attempt to parse JSON from model output\n        let parsed = {};\n        try {\n            parsed = JSON.parse(txt);\n        } catch (e) {\n            // Try to extract JSON substring safely\n            const match = txt.match(/\\{[\\s\\S]*\\}/);\n            if (match) {\n                try {\n                    parsed = JSON.parse(match[0]);\n                } catch (err2) {\n                    console.warn(\"Secondary parse failed\", err2);\n                    throw new Error(\"Model returned invalid JSON\");\n                }\n            } else {\n                console.warn(\"No JSON block detected\");\n                throw new Error(\"Could not parse model output as JSON\");\n            }\n        }\n        if (!parsed.paths || !Array.isArray(parsed.paths)) {\n            throw new Error('Invalid format â€” missing \"paths\" array');\n        }\n        return res.status(200).json(parsed);\n    } catch (err) {\n        console.error(err);\n        return res.status(500).json({\n            error: err.message || \"Server error\"\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./pages/api/recommend.js\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../webpack-api-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = (__webpack_exec__("(api)/./pages/api/recommend.js"));
module.exports = __webpack_exports__;

})();